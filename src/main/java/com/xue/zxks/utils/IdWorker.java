/**
 * Copyright 2010-2012 Twitter, Inc.
 */
package com.xue.zxks.utils;

import lombok.extern.slf4j.Slf4j;

/**
 * An object that generates IDs.
 * This is broken into a separate class in case
 * we ever want to support multiple worker threads
 * per process
 */
@Slf4j
public class IdWorker {

    private final long workerId;
    private final long datacenterId;
    private final long workerIdBits = 5L;
    private final long datacenterIdBits = 5L;
    private final long sequenceBits = 12L;
    private final long timestampLeftShift =
        sequenceBits + workerIdBits + datacenterIdBits;
    private long sequence;
    private long lastTimestamp = -1L;

    public IdWorker(long workerId, long datacenterId, long sequence) {
        // sanity check for workerId
        long maxWorkerId = ~(-1L << workerIdBits);
        if (workerId > maxWorkerId || workerId < 0) {
            throw new IllegalArgumentException(
                String.format(
                    "worker Id can't be greater than %d or less than 0",
                    maxWorkerId
                )
            );
        }

        long maxDatacenterId = ~(-1L << datacenterIdBits);
        if (datacenterId > maxDatacenterId || datacenterId < 0) {
            throw new IllegalArgumentException(
                String.format(
                    "datacenter Id can't be greater than %d or less than 0",
                    maxDatacenterId
                )
            );
        }

        log.info(
            "worker starting. timestamp left shift {}, datacenter id bits {}, worker id bits {}, sequence bits {}, workerid {}",
            timestampLeftShift,
            datacenterIdBits,
            workerIdBits,
            sequenceBits,
            workerId
        );

        this.workerId = workerId;
        this.datacenterId = datacenterId;
        this.sequence = sequence;
    }

    /**
     * This function returns the current time in milliseconds.
     *
     * @return The current time in milliseconds.
     */
    public long getTimestamp() {
        return System.currentTimeMillis();
    }

    /**
     * If the current timestamp is less than the last timestamp, throw an exception.
     * If the current timestamp is equal to
     * the last timestamp, increment the sequence number and if the sequence number
     * is 0, set the timestamp to the next
     * millisecond. If the current timestamp is greater than the last timestamp, set
     * the sequence number to 0 and set the
     * timestamp to the current timestamp
     */
    public synchronized long nextId() {
        long timestamp = timeGen();

        if (timestamp < lastTimestamp) {
            log.error(
                "clock is moving backwards.  Rejecting requests until {}.",
                lastTimestamp
            );
            throw new RuntimeException(
                String.format(
                    "Clock moved backwards.  Refusing to generate id for %d milliseconds",
                    lastTimestamp - timestamp
                )
            );
        }

        if (lastTimestamp == timestamp) {
            long sequenceMask = ~(-1L << sequenceBits);
            sequence = (sequence + 1) & sequenceMask;
            if (sequence == 0) {
                timestamp = tilNextMillis(lastTimestamp);
            }
        } else {
            sequence = 0;
        }

        lastTimestamp = timestamp;
        long twepoch = 1665974986055L;
        long datacenterIdShift = sequenceBits + workerIdBits;
        return (
            ((timestamp - twepoch) << timestampLeftShift) |
            (datacenterId << datacenterIdShift) |
            (workerId << sequenceBits) |
            sequence
        );
    }

    /**
     * If the timestamp generated by the current time is less than or equal to the
     * last timestamp, then the timestamp is
     * generated again
     *
     * @param lastTimestamp The last timestamp generated by the system.
     * @return A timestamp.
     */
    protected long tilNextMillis(long lastTimestamp) {
        long timestamp = timeGen();
        while (timestamp <= lastTimestamp) {
            timestamp = timeGen();
        }
        return timestamp;
    }

    /**
     * If the current time is less than the last time we generated an ID, or if the
     * current time is the same as the last
     * time we generated an ID but the sequence number is greater than the last
     * sequence number we generated, then we wait
     * until the next millisecond to generate the ID
     *
     * @return The current time in milliseconds.
     */
    protected long timeGen() {
        return System.currentTimeMillis();
    }
}
